# -*- mode:shell-script -*-
fpath=(~/.zsh/zsh-completions/src $fpath)
autoload -U compinit
compinit

# default umask
umask 022

# for move by word
autoload -Uz select-word-style
select-word-style bash

# History
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_dups
setopt share_history

# show processing time for too long process
REPORTTIME=10

# key-type is Emacs
bindkey -e
bindkey '^U' backward-kill-line

# Mode/Delete like emacs symbol one
bindkey '^[^B' vi-backward-blank-word
bindkey '^[^F' vi-forward-blank-word
bindkey '^[^K' delete-word

# unbind keys for miss typing
bindkey -r '^O'
bindkey -r '^J'

# for incremental search
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward

# not complete command, these completion is too long.
compdef -d java

# not exit Ctrl-D
setopt ignoreeof

# for sighup
setopt NOHUP
setopt nocheckjobs

# stty
stty stop undef

# completion like emacs
zstyle ':completion:*:default' menu select=1

# completion use cache
zstyle ':completion:*' use-cache true

# with slash
setopt noautoremoveslash

# glob expand
setopt null_glob no_nomatch

# print if line is one line
unsetopt promptcr

# Not bell
setopt NO_beep
setopt nolistbeep

# key binding of command history
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

# setting LANG, this should be UTF-8
export LANG=ja_JP.UTF-8
export LC_ALL=en_US.UTF-8

# setup ls coloring
export LS_COLORS='di=34;1:ln=35:so=32:pi=33:ex=32;1:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'

local LIST_COLOR='di=34;1' 'ln=35' 'so=32' 'ex=32;1' 'bd=46;34' 'cd=43;34'
zstyle ':completion:*' list-colors $LIST_COLOR
alias ls='ls --color -F'
if [ ! -e ~/.dir_colors ]; then
    dircolors -p > ~/.dir_colors
fi
eval `dircolors ~/.dir_colors -b`

# alias
alias grep='grep --color=always'
alias e='emacsclient'
alias s='git st '
alias d='git diff '

# global alias
alias -g L='|less -R'
alias -g G='|grep'

# PROMPT
autoload colors
colors
PROMPT="%B%{${fg[yellow]}%}%n@%m:%{${reset_color}%}%b%# "

# EDITOR
export EDITOR="vim"

# PAGER setting
export PAGER='less'
export LESSCHARSET=utf-8

## Chdir to the ``default-directory'' of currently opened in Emacs buffer.
cde() {
    EMACS_CWD=`emacsclient -e "(editutil-current-buffer-directory)" | sed 's/^"\(.*\)"$/\1/'`
    if [ $EMACS_CWD = "nil" ]; then
	echo "Not found directory"
	return
    fi

    echo "chdir to $EMACS_CWD"
    cd "$EMACS_CWD"
}

## Chdir top of Git project
cdp () {
    dir=$(git rev-parse --show-toplevel 2>/dev/null)
    if [ $? -eq 0 ]; then
	CDP=$dir
        cd $dir
    else
        echo "'$PWD' is not git repos"
    fi
}

## show git branch at right prompt
autoload -Uz vcs_info
zstyle ':vcs_info:*' formats '(%b)'
zstyle ':vcs_info:*' actionformats '[%s]-(%b|%a)'
precmd () {
    psvar=()
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"

    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        stashes=$(git stash list 2>/dev/null | wc -l)
        if [ ${stashes} -eq 0 ]; then
            psvar[2]=""
        else
            psvar[2]=" @${stashes// /}"
        fi
    fi
}
_DIRPART=%B%{$fg[cyan]%}'[%(5~,%-2~/.../%2~,%~)]'%{$reset_color%}%b
RPROMPT=%B"%1(v|%F{magenta}%1v%f%F{yellow}%2v%f|)"%b${_DIRPART}

autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 500
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

# zaw : anything
source ~/.zsh/zaw/zaw.zsh
bindkey '^x^x' zaw-cdr
bindkey '^xd' zaw-git-directories
bindkey '^x^r' zaw-history

bindkey -s "^Xwu" " hub browse -u"

# completion git
# for git completion(too slowly in big repository)
__git_files () {
    _wanted files expl 'local files' _files
}

# for tmux complete
_tmux_pane_words() {
  local expl
  local -a w
  if [[ -z "$TMUX_PANE" ]]; then
    _message "not running inside tmux!"
    return 1
  fi
  w=( ${(u)=$(tmux capture-pane \; show-buffer \; delete-buffer)} )
  _wanted values expl 'words from current tmux pane' compadd -a w
}

zle -C tmux-pane-words-prefix   complete-word _generic
zle -C tmux-pane-words-anywhere complete-word _generic
bindkey '^[/' tmux-pane-words-prefix
bindkey '^[?' tmux-pane-words-anywhere
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' completer _tmux_pane_words
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' ignore-line current
zstyle ':completion:tmux-pane-words-anywhere:*' matcher-list 'b:=* '

function _delete_previous_word () {
    local lbuf
    lbuf=$LBUFFER

    if [[ "$lbuf" == "" ]]; then
        return
    fi

    LBUFFER=$(perl -we '@a = split / /, shift; pop @a; print $_, " " for @a;' $lbuf)
    CURSOR=$#LBUFFER
}
zle -N delete_previous_word _delete_previous_word
bindkey '^[^U' delete_previous_word

# for Emacs
export TERM=xterm
path=(~/bin $path)
